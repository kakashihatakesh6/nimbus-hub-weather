/* eslint-disable @next/next/no-img-element */
import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import WeatherHour from '@/components/WeatherHour';

export default function Home() {

  const [data, setData] = useState();
  const [cwdata, setCwdata] = useState(null);
  const [inputvalue, setinputvalue] = useState('')
  const [isLoading, setIsloading] = useState(false)
  const [error, seterror] = useState()
  const [weather, setWeather] = useState('')
  const [dataStatus, setDataStatus] = useState(false)
  const [backgroundImage2, setbackgroundImage2] = useState();
  const [showBox, setShowBox] = useState(true);
  

  useEffect(() => {

    setbackgroundImage2(`/white-cloud-blue-sky.jpg`)

    const currentDateTime = () => {
      const timeElement = document.getElementById('current-time');
      const dateElement = document.getElementById('current-date');
      const currentDateTime = new Date();
      timeElement.textContent = currentDateTime.toLocaleTimeString().toUpperCase();
      dateElement.textContent = currentDateTime.toLocaleDateString();
    }

    currentDateTime()
    setInterval(currentDateTime, 1000);

  }, [])

  const handleOnchange = (e) => {
    setinputvalue(e.target.value)
  }

  // User Submit
  const handleKeyPress = (e) => {
    if (e.key == "Enter" && inputvalue !== "") {

      // Fetching data from API
      fetchWeatherData(); 
      // tho

    }
  }

  // Fetching Data Function
  const fetchWeatherData = async () => {

    const currentWeatherApi = `https://api.openweathermap.org/data/2.5/weather?q=delhi&units=metric&appid=cd8990ee519781a0bc6968e77b06a2bc`;
    const threeHourApi = `https://api.openweathermap.org/data/2.5/forecast?q={city}&units=metric&appid=cd8990ee519781a0bc6968e77b06a2bc`;

    const cityName = inputvalue;

    try {

      // Start Loading
      setShowBox("hidden")
      setIsloading(false)

      const urlCurrentWeather = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=cd8990ee519781a0bc6968e77b06a2bc`;
      const url3Hour = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=cd8990ee519781a0bc6968e77b06a2bc&cnt=10`;

      // Fetching weather data from api 
      const [cwdata, data] = await Promise.all([
        fetch(urlCurrentWeather).then(res => res.json()),
        fetch(url3Hour).then(res => res.json())
      ])

      
      
      // Processing data 
      if (cwdata.cod === "404") {
        setIsloading(false)
        setDataStatus(false)
        throw new Error(data.message);
      }
      
      setData(data)
      setCwdata(cwdata)
      
      // Set Values
      setWeather(cwdata.weather[0].main)
      setbackgroundImage2(`/background/${weather}.jpg?${new Date().getTime()}`);
      
      // Stop Loading
      setIsloading(false)
      setDataStatus(true)
      setShowBox(true)

    } catch (error) {
      seterror({ "error": `${error}` })
    }

  }



  return (
    <>
      <Head>
        <title>Nimbus Hub</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="weather-favicon.png" />
      </Head>
      <main className={`${styles.homeMain}`} id='home-main' style={{ backgroundImage: `url(${backgroundImage2})` }}>

        <header></header>

        <section className={styles.weatherSection} id='weather-section'>

          <div className="row input-container justify-content-center">
            <div className="container d-flex flex-column align-items-center">

              {/* <h1 className={styles.title}>Welcome to Nimbus Hub</h1> */}
              <h3 className={styles.welcomeText}>Greetings, &nbsp;<span>Weather Enthusiast!</span></h3>

              <div className={styles.searchContainer}>

                <input type="text" className={`search-input ${styles.searchInput}`} value={inputvalue} onChange={handleOnchange}
                  placeholder="Enter your city name" name='city' aria-label="city" onKeyDown={handleKeyPress} required />

                <span>
                  <i className="bi bi-search" ></i>
                </span>
              </div>

            </div>

          </div>

          {<div className="row " style={{ visibility: `${showBox? "visible" : "hidden"}`}}>
            <div className={`container ${styles.timeContainer}`}>
              <span><p className="display-2 my-3" id='current-time'></p></span>
              <h3 className="mb-0" id='current-date'></h3> 

            </div>
          </div>
          }

        </section>

        <div className="weatherHour" id='weather-hour'>

          {error && !dataStatus && !isLoading && <p>{JSON.stringify(error)}</p>}

          {isLoading && <div className={`spinner-border ${styles.loadingIcon}`} role="status">
            <span className="visually-hidden">Loading...</span>
          </div>}

          {data && dataStatus && <WeatherHour data={data} cwdata={cwdata} showBox={showBox} weather={weather} />}

        </div>

      </main>
    </>
  )
}
